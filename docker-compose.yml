version: '3.7'

services:
  frontend:
    container_name: frontend
    build:
      context: ./nistagram-frontend
    volumes:
      - ./nistagram-frontend/src:/app/src
    environment: 
      - CHOKIDAR_USEPOLLING=true
    ports:
      - 3000:3000
    expose:
      - 3000
    stdin_open: true


  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  saga:
    container_name: saga
    build:
      context: ./nistagram-saga
      target: development
    volumes:
      - ./nistagram-saga:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3001:3000
    command: /bin/bash -l -c "npm run start:dev"
    env_file:
      - ./nistagram-saga/.env
    depends_on:
      - rabbitmq
      - auth
      - users
      - publications
      - activities

  auth:
    container_name: auth
    build:
      context: ./nistagram-auth
      target: development
    volumes:
      - ./nistagram-auth:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3002:3000
    command: /bin/bash -l -c "npm run start:dev"
    env_file:
      - ./nistagram-auth/.env
    depends_on:
      - rabbitmq
      - authdb

  authdb:
    image : mongo:latest
    container_name: authdb
    ports:
      - 4002:27017
    restart: always

  users:
    container_name: users
    build:
      context: ./nistagram-users
      target: development
    volumes:
      - ./nistagram-users:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3003:3000
    command: /bin/bash -l -c "npm run start:dev"
    env_file:
      - ./nistagram-users/.env
    depends_on:
      - rabbitmq
      - userdb

  userdb:
    image : mongo:latest
    container_name: userdb
    ports:
      - 4003:27017
    restart: always

  publications:
    container_name: publications
    build:
      context: ./nistagram-publications
      target: development
    volumes:
      - ./nistagram-publications:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3004:3000
    command: /bin/bash -l -c "npm run start:dev"
    env_file:
      - ./nistagram-publications/.env
    depends_on:
      - rabbitmq
      - publicationdb

  publicationdb:
    image : mongo:latest
    container_name: publicationdb
    ports:
      - 4004:27017
    restart: always

  activities:
    container_name: activities
    build:
      context: ./nistagram-activities
      target: development
    volumes:
      - ./nistagram-activities:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3005:3000
    command: /bin/bash -l -c "npm run start:dev"
    env_file:
      - ./nistagram-activities/.env
    depends_on:
      - rabbitmq
      - activitydb

  activitydb:
    image : mongo:latest
    container_name: activitydb
    ports:
      - 4005:27017
    restart: always

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - 80:80
    volumes:
      - ./default.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - saga

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - '9090:9090'
    restart: always
    volumes:
      - './config/prometheus.yml:/etc/prometheus/prometheus.yml'

  alertmanager:
    image: prom/alertmanager:v0.21.0
    container_name: alert-manager
    restart: on-failure
    ports:
      - 9093:9093
    volumes:
      - ./config/alertmanager:/etc/alertmanager
  
  node-exporter:
    image: prom/node-exporter:v1.1.2
    container_name: node-exporter
    ports:
      - 9100:9100
  
  grafana:
    image: grafana/grafana:7.5.2
    container_name: grafana
    restart: on-failure
    ports:
      - 3100:3000
    depends_on:
      - prometheus

networks:
  default:
    name: nistagram
    driver: bridge